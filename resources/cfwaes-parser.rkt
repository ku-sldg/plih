#lang plai
(define-type CFWAE/S
  (num (n number?))
  (id (name symbol?))
  (sum (x CFWAE/S?) (y CFWAE/S?))
  (dif (x CFWAE/S?) (y CFWAE/S?))
  (mul (x CFWAE/S?) (y CFWAE/S?))
  (div (x CFWAE/S?) (y CFWAE/S?))
  (fun (id symbol?) (body CFWAE/S?))
  (if0 (c CFWAE/S?) (t CFWAE/S?) (e CFWAE/S?))
  (app (fun-expr CFWAE/S?) (arg-expr CFWAE/S?))
  (with (id symbol?) (arg-expr CFWAE/S?) (value-expr CFWAE/S?))
  (assign (id symbol?) (value CFWAE/S?))
  (seq (a CFWAE/S?) (b CFWAE/S?)))

(define parse-cfwaes
  (lambda (expr)
    (cond ((symbol? expr) (id expr))
          ((number? expr) (num expr))
          ((list? expr)
           (case (car expr)
             ((-) (dif (parse-cfwaes (cadr expr)) (parse-cfwaes (caddr expr))))
             ((+) (sum (parse-cfwaes (cadr expr)) (parse-cfwaes (caddr expr))))
             ((*) (mul (parse-cfwaes (cadr expr)) (parse-cfwaes (caddr expr))))
             ((/) (div (parse-cfwaes (cadr expr)) (parse-cfwaes (caddr expr))))
             ((if0) (if0 (parse-cfwaes (cadr expr)) (parse-cfwaes (caddr expr)) 
                          (parse-cfwaes (cadddr expr))))
             ((fun) (fun (cadr expr) (parse-cfwaes (caddr expr))))
             ((with) (with (car (cadr expr)) 
                           (parse-cfwaes (cadr (cadr expr))) 
                           (parse-cfwaes (caddr expr))))
             ((assign) (assign (cadr expr) (parse-cfwaes (caddr expr))))
             ((seq) (seq (parse-cfwaes (cadr expr)) (parse-cfwaes (caddr expr))))
             (else (app (parse-cfwaes (car expr)) (parse-cfwaes (cadr expr))))))
          (else 'parse-cfwaes "Unexpected token"))))
